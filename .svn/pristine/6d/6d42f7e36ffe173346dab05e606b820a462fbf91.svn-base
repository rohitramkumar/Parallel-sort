/**
 * @file psort.cpp
 */

/**
 * Public wrapper for the parallel sort implementation.
 * @param array The structure to sort
 */
#include <stdlib.h>
#include <iostream>

template <class T>
void ParallelSort::psort(vector<T>* array)
{
    std::cout << "Executing Wrapper function..." << '\n'; 
    psort(array, 0, array -> size() - 1);
}

template <class T>
void ParallelSort::psort(vector<T>* array, int lo, int high) {
    
    std::cout << "Executing psort..." << '\n';
    if(lo >= high) return;
    int pivotIndex = partition(array, lo, high);
    psort(array, lo, pivotIndex - 1);
    psort(array, pivotIndex + 1, high);
    
}

template <class T>
int ParallelSort::partition(vector<T>* array, int lo, int high) {
   
    std::cout << "Partitioning..." << '\n'; 
    int optimalPivotIndex = getOptimalPivot(array, lo, high);
    std::cout << "Optimal Pivot Index: " << optimalPivotIndex << '\n';
    T optimalPivot = array -> at(optimalPivotIndex);
    swap(array, lo, optimalPivotIndex);
   
    int loRunner = lo + 1;
    int highRunner = high;
    
    while(loRunner < highRunner) {
        
        while(array -> at(loRunner) <= optimalPivot) loRunner++;
        
        while(array -> at(highRunner) > optimalPivot) highRunner--;
        
        if(loRunner < highRunner) swap(array, loRunner, highRunner);
        
    }
    
    swap(array, lo, highRunner);
    return highRunner;
    
    
}


template <class T>
int ParallelSort::getOptimalPivot(vector<T>* array, int lo, int high) {
    
    
    int size = high - lo + 1;
    int rand1, rand2, rand3;
    
    rand1 = (rand() % size) + lo;
    rand2 = (rand() % size) + lo;
    rand3 = (rand() % size) + lo;
    
    vector<int>* indexArray = new vector<int>();
    indexArray -> push_back(rand1);
    indexArray -> push_back(rand2);
    indexArray -> push_back(rand3);
    
    std::sort(indexArray->begin(), indexArray->end());
    
    int ret_val = indexArray -> at(1);
    delete indexArray;
    return ret_val;
    
}

template <class T>
void ParallelSort::swap(vector<T>* array, int index1, int index2) {
    
    T temp = array -> at(index1);
    array -> at(index1) = array -> at(index2);
    array -> at(index2) = temp;
}
