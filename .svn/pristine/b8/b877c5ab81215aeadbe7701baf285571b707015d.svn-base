/**
 * @file psort.cpp
 *
 */

/**
 * Public wrapper for the parallel sort implementation.
 * @param array The structure to sort
 */
#include <stdlib.h>
#include <iostream>

template <class T>
void ParallelSort::psort(vector<T>* array)
{
    psort(array, 0, array -> size() - 1);
}

template <class T>
void ParallelSort::psort(vector<T>* array, int lo, int high) {
    
    if(lo >= high) return;
    int pivotIndex = partition(array, lo, high);
    psort(array, lo, pivotIndex - 1);
    psort(array, pivotIndex + 1, high);
    
}

/**
* Adapted from: https://wiki.cites.illinois.edu/wiki/display/cs125/Sorting+Algorithms?src=search
*
*/
template <class T>
int ParallelSort::partition(vector<T>* array, int lo, int high) {
   
   int pivotIndex = getOptimalPivot(lo, high);
   int pivot = array -> at(pivotIndex);
   swap(array, lo, pivotIndex);
   int loRunner = lo + 1;
   int highRunner = high;
   while(loRunner < highRunner) {

        if(array -> at(loRunner) >= pivot) {
            swap(array, loRunner, highRunner);
            highRunner--;
        }
        else loRunner++;
   }

   int ret_val = 0;
   if(array -> at(loRunner) > pivot) ret_val = loRunner - 1;
   else ret_val = loRunner;

   swap(array, lo, ret_val);
   return ret_val;
       
}

/**
*
* Adapted from: http://algs4.cs.princeton.edu/23quicksort/
*/
int ParallelSort::getOptimalPivot(int lo, int high) {
    
    
    int size = high - lo + 1;
    if(size <= 5) return lo;

    int rand1, rand2, rand3;
    
    // get three random indices
    rand1 = (rand() % size) + lo;
    rand2 = (rand() % size) + lo;
    rand3 = (rand() % size) + lo;
    
    vector<int>* indexArray = new vector<int>();
    indexArray -> push_back(rand1);
    indexArray -> push_back(rand2);
    indexArray -> push_back(rand3);
    
    std::sort(indexArray->begin(), indexArray->end());
    
    // get the median of the three indices
    int ret_val = indexArray -> at(1);
    delete indexArray;

    // return our optimal pivot
    return ret_val;
    
}

template <class T>
void ParallelSort::swap(vector<T>* array, int index1, int index2) {
    
    if(index1 == index2) return;
    T temp = array -> at(index1);
    array -> at(index1) = array -> at(index2);
    array -> at(index2) = temp;
}

